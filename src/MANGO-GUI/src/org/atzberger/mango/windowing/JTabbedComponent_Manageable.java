package org.atzberger.mango.windowing;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.plaf.basic.BasicButtonUI;

/**
 *
 * Provides tabbed window panes that can hold panels.  This class provides the
 * close and windowing icons and functionality.
 *
 * @author Paul J. Atzberger
 *
 * @see <a href="http://www.atzberger.org">http://www.atzberger.org</a>
 */
public class JTabbedComponent_Manageable extends javax.swing.JPanel {

  private JTabbedPane pane = null;

  /** Creates new form JTabbedComponent_Manageable */
  public JTabbedComponent_Manageable(JTabbedPane pane_in, String tabName) {

    String str = "";

    pane = pane_in;

    initComponents();

//    if (pane != null) {
//      int i = pane.indexOfTabComponent(JTabbedComponent_Manageable.this);
//      if (i != -1) {
//        str = pane.getTitleAt(i);
//      }
//    }

    jLabel_TabName.setText(tabName);

    //setOpaque(false);

    //make JLabel read titles from JTabbedPane
    //JLabel label = new JLabel_TabName();

    //add(label);
    //add more space between the label and the button
    //label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));

    //tab button
    //JButton button = new TabButton();
    //add(button);

    //tab button @@@
    //JButton button2 = new TabButton();
    //add(button2);

    //add more space to the top of the component
    //setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel_TabName = new JLabel_TabName();
    jButton_Close = new TabButton();

    setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    setName("Form"); // NOI18N
    setOpaque(false);
    setPreferredSize(new java.awt.Dimension(133, 17));
    setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

    jLabel_TabName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jLabel_TabName.setDoubleBuffered(true);
    jLabel_TabName.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    jLabel_TabName.setIconTextGap(2);
    jLabel_TabName.setMaximumSize(new java.awt.Dimension(32767, 32767));
    jLabel_TabName.setMinimumSize(new java.awt.Dimension(10, 17));
    jLabel_TabName.setName("jLabel_TabName"); // NOI18N
    jLabel_TabName.setPreferredSize(new java.awt.Dimension(120, 17));
    add(jLabel_TabName);
    setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));

    jButton_Close.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jButton_Close.setBorderPainted(false);
    jButton_Close.setContentAreaFilled(false);
    jButton_Close.setMargin(new java.awt.Insets(2, 5, 2, 5));
    jButton_Close.setMinimumSize(new java.awt.Dimension(11, 19));
    jButton_Close.setName("jButton_Close"); // NOI18N
    jButton_Close.setPreferredSize(new java.awt.Dimension(11, 19));
    add(jButton_Close);
  }// </editor-fold>//GEN-END:initComponents

  private class JLabel_TabName extends JLabel {

//    @Override
//    public String getText() {
//
//      String str = "";
//
//      if (pane != null) {
//        int i = pane.indexOfTabComponent(JTabbedComponent_Manageable.this);
//        if (i != -1) {
//          str = pane.getTitleAt(i);
//        }
//      }
//
//      return str;
//    }
    
  };

  private class TabButton extends JButton implements ActionListener {

    public TabButton() {

      int size = 17;
      setPreferredSize(new Dimension(size, size));
      setToolTipText("close this tab");
      //Make the button looks the same for all Laf's
      setUI(new BasicButtonUI());
      //Make it transparent
      setContentAreaFilled(false);
      //No need to be focusable
      setFocusable(false);
      setBorder(BorderFactory.createEtchedBorder());
      setBorderPainted(false);
      //Making nice rollover effect
      //we use the same listener for all buttons
      addMouseListener(buttonMouseListener);
      setRolloverEnabled(true);
      //Close the proper tab by clicking the button
      addActionListener(this);

    }

    public void actionPerformed(ActionEvent e) {
      int i = pane.indexOfTabComponent(JTabbedComponent_Manageable.this);
      if (i != -1) {
        pane.remove(i);
      }
    }

    /* no text allowed */
    public String getText() {
      return "";
    }

    //we don't want to update UI for this button
    public void updateUI() {
    }

    //paint the cross
    protected void paintComponent(Graphics g) {

      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D) g.create();
      //shift the image for pressed buttons
      if (getModel().isPressed()) {
        g2.translate(1, 1);
      }
      g2.setStroke(new BasicStroke(2));
      g2.setColor(Color.BLACK);
      if (getModel().isRollover()) {
        g2.setColor(Color.RED);
      }
      int delta = 6;
      g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
      g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
      g2.dispose();
    }
  }
  private final static MouseListener buttonMouseListener = new MouseAdapter() {

    public void mouseEntered(MouseEvent e) {
      Component component = e.getComponent();
      if (component instanceof AbstractButton) {
        AbstractButton button = (AbstractButton) component;
        button.setBorderPainted(true);
      }
    }

    public void mouseExited(MouseEvent e) {
      Component component = e.getComponent();
      if (component instanceof AbstractButton) {
        AbstractButton button = (AbstractButton) component;
        button.setBorderPainted(false);
      }
    }
  };
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton_Close;
  private javax.swing.JLabel jLabel_TabName;
  // End of variables declaration//GEN-END:variables
}
