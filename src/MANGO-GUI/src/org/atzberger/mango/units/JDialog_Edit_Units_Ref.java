package org.atzberger.mango.units;

import org.atzberger.mango.table.TableData_MultipleChoice1;
import org.atzberger.mango.table.JTable_Properties1_Default;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import org.atzberger.mango.units.Atz_Unit;
import org.atzberger.mango.units.Atz_UnitsRef;
import org.atzberger.application.selm_builder.SELM_CouplingOperator;
import org.atzberger.mango.table.TableModel_Properties1_Default;
import org.atzberger.mango.table.JDialog_Edit;
import org.atzberger.mango.table.JTable_Properties1_Default;
import org.atzberger.mango.table.TableData_MultipleChoice1;
import org.atzberger.mango.table.TableData_Units_Ref;

/**
 *
 * Provides graphical user interface to select and modify units assigned.
 *
 * @author Paul J. Atzberger
 *
 * @see <a href="http://www.atzberger.org">http://www.atzberger.org</a>
 */
public class JDialog_Edit_Units_Ref extends JDialog_Edit implements TableModelListener {

  //protected static final String ACTION_BUTTON_OK = "ACTION_BUTTON_OK";
  //protected static final String ACTION_BUTTON_CANCEL = "ACTION_BUTTON_CANCEL";
  JButton jButton_trigger = null;  /* button triggering opening of the dialog */

  Boolean flagChangeValue = false; /* indicates if value should be changed */
  
  TableData_Units_Ref tableData_Units_Ref = null;

  Atz_Unit[] atz_Unit_LENGTH_List;
  Atz_Unit[] atz_Unit_TIME_List;
  Atz_Unit[] atz_Unit_MASS_List;

  TableData_MultipleChoice1 tableData_LENGTH;
  TableData_MultipleChoice1 tableData_TIME;
  TableData_MultipleChoice1 tableData_MASS;

  int paramIndex_unitsVisible = -1;
  
  /** Creates new form JDialog_Edit_CouplingOpList */
  public JDialog_Edit_Units_Ref(java.awt.Frame parent, boolean modal) {
    super(parent, modal);

    initComponents();
    //modifyComponents();
  }

  public JDialog_Edit_Units_Ref() {    
    initComponents();
    //modifyComponents();
    setModal(true);  /* must be Modal to handle event processing correctly */
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTable_Units_Ref = new JTable_Properties1_Default();
    jPanel1 = new javax.swing.JPanel();
    jButton_OK = new javax.swing.JButton();
    jButton_Cancel = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setName("Form"); // NOI18N

    jScrollPane1.setName("jScrollPane1"); // NOI18N

    jTable_Units_Ref.setModel(new TableModel_Properties1_Default());
    jTable_Units_Ref.getModel().addTableModelListener(this);
    jTable_Units_Ref.setName("jTable_Units_Ref"); // NOI18N
    jScrollPane1.setViewportView(jTable_Units_Ref);

    jPanel1.setName("jPanel1"); // NOI18N

    jButton_OK.setMaximumSize(new java.awt.Dimension(79, 100));
    jButton_OK.setMinimumSize(new java.awt.Dimension(79, 100));
    jButton_OK.setName("jButton_OK"); // NOI18N
    jButton_OK.setPreferredSize(new java.awt.Dimension(79, 100));
    jButton_OK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton_OKActionPerformed(evt);
      }
    });

    jButton_Cancel.setMaximumSize(new java.awt.Dimension(79, 100));
    jButton_Cancel.setMinimumSize(new java.awt.Dimension(79, 100));
    jButton_Cancel.setName("jButton_Cancel"); // NOI18N
    jButton_Cancel.setPreferredSize(new java.awt.Dimension(79, 100));
    jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton_CancelActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(310, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButton_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButton_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(29, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        .addGap(12, 12, 12))
      .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButton_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OKActionPerformed

    int I;

    /* register any partially completed edits as being final */
    TableCellEditor editor = jTable_Units_Ref.getCellEditor();
    if (editor != null) {
      editor.stopCellEditing();
    }

    /* Set the reference data using the table selections */
    Atz_UnitsRef atz_UnitsRef = tableData_Units_Ref.atz_UnitsRef;

    atz_UnitsRef.unitsSelected.remove(Atz_Unit.LENGTH_STR);
    I = tableData_LENGTH.ItemSelectedIndex;
    atz_UnitsRef.unitsSelected.put(Atz_Unit.LENGTH_STR, atz_Unit_LENGTH_List[I]);

    atz_UnitsRef.unitsSelected.remove(Atz_Unit.TIME_STR);
    I = tableData_TIME.ItemSelectedIndex;
    atz_UnitsRef.unitsSelected.put(Atz_Unit.TIME_STR, atz_Unit_TIME_List[I]);

    atz_UnitsRef.unitsSelected.remove(Atz_Unit.MASS_STR);
    I = tableData_MASS.ItemSelectedIndex;
    atz_UnitsRef.unitsSelected.put(Atz_Unit.MASS_STR, atz_Unit_MASS_List[I]);

    Boolean unitsVisible = (Boolean) jTable_Units_Ref.getModel().getValueAt(paramIndex_unitsVisible,1);
    atz_UnitsRef.setVisiblePreferred(unitsVisible);
    //System.out.println("Units visible = " + unitsVisible);

    /* close the window and fire related events */

    this.setVisible(false);
    flagChangeValue = true;
    
    newValue = tableData_Units_Ref;

    this.firePropertyChange(ACTION_DIALOG_DONE, 1, 0);
    
  }//GEN-LAST:event_jButton_OKActionPerformed

  private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
      this.setVisible(false);

      flagChangeValue = false;
      newValue = null;

      this.firePropertyChange(ACTION_DIALOG_DONE, 1, 0);
  }//GEN-LAST:event_jButton_CancelActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        JDialog_Edit_Units_Ref dialog = new JDialog_Edit_Units_Ref(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {

          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton_Cancel;
  private javax.swing.JButton jButton_OK;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTable jTable_Units_Ref;
  // End of variables declaration//GEN-END:variables


  public Object getDataValue() {

    //newValue = (Object) jTextField_SimpleArray_Value.getText();

    if (flagChangeValue) {
      return newValue;
    } else {
      return oldValue;
    }

  }

  public void setDataValue(Object dataValue, String dataName, String dataType) {

    SELM_CouplingOperator interaction;
    String name;
    int k, N;

    TableModel_Properties1_Default tableModel_Units_Ref;

    super.setDataValue(dataValue, dataName, dataType);

    tableModel_Units_Ref = (TableModel_Properties1_Default) jTable_Units_Ref.getModel();

    tableData_Units_Ref = (TableData_Units_Ref) dataValue;

    Atz_UnitsRef atz_UnitsRef = tableData_Units_Ref.atz_UnitsRef;
    Atz_Unit     atz_Unit;
    String       unitTypeStr;
           
    /* create pull-down menu for each unit type */
    N                = atz_UnitsRef.unitList.length;

    String[]   unitNames_LENGTH     = new String[N];
    atz_Unit_LENGTH_List = new Atz_Unit[N];
    int I_LENGTH                    = 0;
    int selectI_LENGTH              = 0;

    String[]   unitNames_TIME       = new String[N];
    atz_Unit_TIME_List   = new Atz_Unit[N];
    int I_TIME       = 0;
    int selectI_TIME = 0;

    String[]   unitNames_MASS       = new String[N];
    atz_Unit_MASS_List   = new Atz_Unit[N];
    int I_MASS       = 0;
    int selectI_MASS = 0;

    Atz_Unit unitSelected_LENGTH = (Atz_Unit) atz_UnitsRef.unitsSelected.get(Atz_Unit.LENGTH_STR);
    Atz_Unit unitSelected_TIME   = (Atz_Unit) atz_UnitsRef.unitsSelected.get(Atz_Unit.TIME_STR);
    Atz_Unit unitSelected_MASS   = (Atz_Unit) atz_UnitsRef.unitsSelected.get(Atz_Unit.MASS_STR);
    
    for (k = 0; k < N; k++) {
      atz_Unit = atz_UnitsRef.unitList[k];

      if (atz_Unit.unitType == Atz_Unit.LENGTH) {
        unitNames_LENGTH[I_LENGTH] = atz_Unit.unitLongName + " (" + atz_Unit.unitShortName + ")";
        atz_Unit_LENGTH_List[I_LENGTH] = atz_Unit;
        if (atz_Unit.equals(unitSelected_LENGTH)) {
          selectI_LENGTH = I_LENGTH;
        }
        I_LENGTH++;
      }

      if (atz_Unit.unitType == Atz_Unit.TIME) {
        unitNames_TIME[I_TIME] = atz_Unit.unitLongName + " (" + atz_Unit.unitShortName + ")";
        atz_Unit_TIME_List[I_TIME] = atz_Unit;
        if (atz_Unit.equals(unitSelected_TIME)) {
          selectI_TIME = I_TIME;
        }
        I_TIME++;
      }

      if (atz_Unit.unitType == Atz_Unit.MASS) {
        unitNames_MASS[I_MASS] = atz_Unit.unitLongName + " (" + atz_Unit.unitShortName + ")";
        atz_Unit_MASS_List[I_MASS] = atz_Unit;
        if (atz_Unit.equals(unitSelected_MASS)) {
          selectI_MASS = I_MASS;
        }
        I_MASS++;
      }
      
    } /* end of k loop */
    
    tableData_LENGTH = new TableData_MultipleChoice1(makeSubArray(unitNames_LENGTH, I_LENGTH), selectI_LENGTH);
    tableData_TIME   = new TableData_MultipleChoice1(makeSubArray(unitNames_TIME, I_TIME), selectI_TIME);
    tableData_MASS   = new TableData_MultipleChoice1(makeSubArray(unitNames_MASS, I_MASS), selectI_MASS);
    
    /* set up the table to display options */
    int i = 0;
    tableModel_Units_Ref.setValueAt("Length", i, 0, tableModel_Units_Ref.NOT_EDITABLE); 
    tableModel_Units_Ref.setValueAt(tableData_LENGTH, i, 1, tableModel_Units_Ref.EDITABLE);
    i++;

    tableModel_Units_Ref.setValueAt("Time", i, 0, tableModel_Units_Ref.NOT_EDITABLE);
    tableModel_Units_Ref.setValueAt(tableData_TIME, i, 1, tableModel_Units_Ref.EDITABLE);
    i++;

    tableModel_Units_Ref.setValueAt("Mass", i, 0, tableModel_Units_Ref.NOT_EDITABLE);
    tableModel_Units_Ref.setValueAt(tableData_MASS, i, 1, tableModel_Units_Ref.EDITABLE);
    i++;

    tableModel_Units_Ref.setValueAt("Units Visible", i, 0, tableModel_Units_Ref.NOT_EDITABLE);
    tableModel_Units_Ref.setValueAt(new Boolean(atz_UnitsRef.getVisiblePreferred()), i, 1, tableModel_Units_Ref.EDITABLE);
    paramIndex_unitsVisible = i;
    i++;
          
  }

  public void tableChanged(TableModelEvent e) {

    int row    = e.getFirstRow();
    int column = e.getColumn();

    SELM_CouplingOperator interaction;

    TableModel model = (TableModel) e.getSource();

    Object data       = model.getValueAt(row, column); /* not column -1 since not selectable */
       
    if ( (data != null) && (e.getType() == e.UPDATE) && (column == 0) ) {

      /* update all the interaction data */
      //interaction                                    = tableData_CouplingOpList.couplingOpList[row];
      //interaction.CouplingOpName                    = (String) model.getValueAt(row, 0);
      System.out.println("UNITS table changed.");

      //tableData_CouplingOpList.couplingOpList[row] = interaction;
    }

  }




  @Override
  public void setVisible(boolean flag) {
    super.setVisible(flag);

    if (flag == false) {
      //jTable_CouplingOpList.changeSelection(0, 1, false, false);
      jTable_Units_Ref.clearSelection();
    }

  }
  
  private String[] makeSubArray(String[] array, int N) {
     
    String[] array_new = new String[N];
    
    System.arraycopy(array, 0, array_new, 0, N);

    return array_new;
  }

}
