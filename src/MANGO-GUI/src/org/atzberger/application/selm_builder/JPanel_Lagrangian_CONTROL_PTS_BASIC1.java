package org.atzberger.application.selm_builder;

import org.atzberger.mango.atz3d.JPanel_Model_View_RenderPanel;
import org.atzberger.mango.atz3d.JPanel_Model_View_Composite;
import org.atzberger.mango.atz3d.Atz_LinearAlgebra;
import org.atzberger.mango.atz3d.Atz3D_Element;
import org.atzberger.mango.atz3d.Atz3D_Camera;
import org.atzberger.mango.atz3d.Atz3D_Model;
import org.atzberger.mango.atz3d.Atz3D_Element_Points;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.ButtonGroup;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * Panel for editing this data type.
 *
 * @author Paul J. Atzberger
 *
 * @see <a href="http://www.atzberger.org">http://www.atzberger.org</a>
 */
public class JPanel_Lagrangian_CONTROL_PTS_BASIC1 extends JPanel_Lagrangian implements SELM_LagrangianRenderView {

    String interfaceModeStr = "";

    final static String interfaceMode_MOVE_POINTS   = "MOVE_POINTS";
    final static String interfaceMode_SELECT_POINTS = "SELECT_POINTS";

    private      MouseMotionListener   jPanel_Model_View_MouseMotionListener = null;
    private      MouseListener         jPanel_Model_View_MouseListener       = null;

    int                                flagMouseDraggedOn;
    Atz3D_Camera                       camera_on_click;
    SELM_Lagrangian_CONTROL_PTS_BASIC1 lagrangian_on_click;
    int                                mousePositionOnClickX;
    int                                mousePositionOnClickY;
    long                               mouseClickedElaspedTime_last;
    long                               mouseClickedElaspedTime;

    int                                mousePositionX;
    int                                mousePositionY;

    int                                mouseClickedPositionX;
    int                                mouseClickedPositionY;

    int                                mouseClickedPositionX_last;
    int                                mouseClickedPositionY_last;

    int[]                              controlPtsSelectedList = new int[0];

    public JPanel_Lagrangian_CONTROL_PTS_BASIC1(application_SharedData applSharedData_in) {
      super();
      applSharedData = applSharedData_in;
      initComponents();

      modifyComponents();

      /* add listener to the jTable_Lagrangian for any changes there */
      jTable_Lagrangian.getModel().addTableModelListener(new TableModelListener() {
        public void tableChanged(TableModelEvent e)  {
          jTable_Lagrangian_tableChanged(e);
        }
      });

    }

    public void jTable_Lagrangian_tableChanged(TableModelEvent e)  {
      //System.out.println("jTable_Lagrangian changed event" + e);

      fireLagrangianChanged();
      
    }

    void resetControlPtsSelectedList() {
      controlPtsSelectedList = new int[0];

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      renderModelView.repaint();
      
    }

    void setControlPtsSelectedList(int[] controlPtsSelectedList_in) {
      controlPtsSelectedList = controlPtsSelectedList_in;

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      renderModelView.repaint();

    }

    public void fireLagrangianChanged() {

      JPanel jPanel_parent = (JPanel) this.getParent();

      if (jPanel_parent != null)
        jPanel_parent.firePropertyChange("CHANGED_LAGRANGIAN_DATA", 0, 1);

    }

    /** Creates new form JPanel_Lagrangian_CONTROL_PTS_BASIC1 */
    public JPanel_Lagrangian_CONTROL_PTS_BASIC1() {
      super();
      initComponents();

      modifyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane_Lagrangian = new javax.swing.JScrollPane();
        jTable_Lagrangian = new org.atzberger.mango.table.JTable_Properties1_Default();
        jToggleButton_Move_Points = new javax.swing.JToggleButton();
        jToggleButton_Add_Points = new javax.swing.JToggleButton();
        jToggleButton_Remove_Points = new javax.swing.JToggleButton();
        jToggleButton_Select_Points = new javax.swing.JToggleButton();

        setName("CONTROL_PTS_BASIC1"); // NOI18N

        jScrollPane_Lagrangian.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane_Lagrangian.setName("jScrollPane_Lagrangian"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.atzberger.application.selm_builder.application_Main.class).getContext().getResourceMap(JPanel_Lagrangian_CONTROL_PTS_BASIC1.class);
        jTable_Lagrangian.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jTable_Lagrangian.border.lineColor"))); // NOI18N
        jTable_Lagrangian.setModel(new org.atzberger.application.selm_builder.TableModel_Lagrangian_CONTROL_PTS_BASIC1());
        jTable_Lagrangian.setName("jTable_Lagrangian"); // NOI18N
        jScrollPane_Lagrangian.setViewportView(jTable_Lagrangian);

        jToggleButton_Move_Points.setText(resourceMap.getString("jToggleButton_Move_Points.text")); // NOI18N
        jToggleButton_Move_Points.setName("jToggleButton_Move_Points"); // NOI18N
        jToggleButton_Move_Points.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton_Move_PointsStateChanged(evt);
            }
        });
        jToggleButton_Move_Points.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_Move_PointsActionPerformed(evt);
            }
        });

        jToggleButton_Add_Points.setText(resourceMap.getString("jToggleButton_Add_Points.text")); // NOI18N
        jToggleButton_Add_Points.setName("jToggleButton_Add_Points"); // NOI18N
        jToggleButton_Add_Points.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_Add_PointsActionPerformed(evt);
            }
        });

        jToggleButton_Remove_Points.setText(resourceMap.getString("jToggleButton_Remove_Points.text")); // NOI18N
        jToggleButton_Remove_Points.setName("jToggleButton_Remove_Points"); // NOI18N
        jToggleButton_Remove_Points.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_Remove_PointsActionPerformed(evt);
            }
        });

        jToggleButton_Select_Points.setText(resourceMap.getString("jToggleButton_Select_Points.text")); // NOI18N
        jToggleButton_Select_Points.setName("jToggleButton_Select_Points"); // NOI18N
        jToggleButton_Select_Points.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton_Select_PointsStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane_Lagrangian, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton_Add_Points)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton_Move_Points)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(jToggleButton_Select_Points)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton_Remove_Points)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton_Add_Points)
                    .addComponent(jToggleButton_Remove_Points)
                    .addComponent(jToggleButton_Move_Points)
                    .addComponent(jToggleButton_Select_Points))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane_Lagrangian, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    void modifyComponents() {
      
      /* setup the button group for the point buttons */
      ButtonGroup buttonGroup = applSharedData.jPanel_Model_View_Composite.getButtonGroup_Model_View_Controls();

      buttonGroup.add(jToggleButton_Move_Points);
      buttonGroup.add(jToggleButton_Add_Points);
      buttonGroup.add(jToggleButton_Select_Points);
      buttonGroup.add(jToggleButton_Remove_Points);
      
    }

    void setInterfaceMode(String modeStr) {

      interfaceModeStr = modeStr;

      if (interfaceModeStr.equals(interfaceMode_MOVE_POINTS)) {
        setInterface_Mode_MOVE_POINTS();
      }

      if (interfaceModeStr.equals(interfaceMode_SELECT_POINTS)) {
        setInterface_Mode_SELECT_POINTS();
      }

      //if (modeStr.equals("ADD_MOVE_POINTS")) {
      //  setInterface_Mode_MOVE_POINTS();
      //}

    }


  void setInterface_Mode_SELECT_POINTS() {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    /* set interface to external controls (move points) */
    renderModelView.setInterfaceMode(renderModelView.interfaceMode_External_Control); /* replace with constants */

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }
    
    jPanel_Model_View_MouseListener = new MouseListener() {

      public void mouseClicked(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_SELECT_POINTS)) {
            interface_Selection_mouseClicked(e);
          }

        }

      } /* end mouseClicked() */

      public void mouseExited(MouseEvent e) {
      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
      }

      public void mouseReleased(MouseEvent e) {

      }
      
    };
    
    renderModelView.addMouseListener(jPanel_Model_View_MouseListener);

    /* add annotations to render view so selections are seen */
    renderModelView.removeAllRenderView(atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION);
    renderModelView.addRenderView(this);
    
  }

  void disconnectInterface_Mode_SELECT_POINTS() {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    /* remove the annotation */
    //renderModelView.removeAllRenderView(atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION);
    
  }


  void disconnectInterface_Mode_MOVE_POINTS() {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    if (jPanel_Model_View_MouseMotionListener != null) { /* remove the listener */
      renderModelView.removeMouseMotionListener(jPanel_Model_View_MouseMotionListener);
      jPanel_Model_View_MouseMotionListener = null;
    }

    /* reset the drag flag */
    flagMouseDraggedOn = 0;

    /* remove the annotation */
    renderModelView.removeAllRenderView(atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION);

  }


  void setInterface_Mode_MOVE_POINTS() {

    JPanel_Model_View_Composite renderModelViewComposite = (JPanel_Model_View_Composite) applSharedData.jPanel_Model_View_Composite;

    JPanel_Model_View_RenderPanel renderModelView = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    /* set interface to external controls (move points) */
    renderModelView.setInterfaceMode(renderModelView.interfaceMode_External_Control); /* replace with constants */

    /* setup action listener for the renderModelView */
    if (jPanel_Model_View_MouseMotionListener != null) { /* remove any old listeners */
      renderModelView.removeMouseMotionListener(jPanel_Model_View_MouseMotionListener);
      jPanel_Model_View_MouseMotionListener = null;
    }

    if (jPanel_Model_View_MouseListener != null) { /* remove any old listeners */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    jPanel_Model_View_MouseMotionListener = new MouseMotionListener() {

      public void mouseDragged(MouseEvent e) {
        JPanel_Model_View_RenderPanel renderModelView = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {
          interface_Move_Point_mouseDragged(e);
        }

      }

      public void mouseMoved(MouseEvent e) {
        /* nothing to do for this type */
      }
    };

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    jPanel_Model_View_MouseListener = new MouseListener() {

      public void mouseClicked(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_SELECT_POINTS)) {
            interface_Selection_mouseClicked(e);            
          }

        }
        
      } /* end mouseClicked() */

      public void mouseExited(MouseEvent e) {
      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
      }

      public void mouseReleased(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_MOVE_POINTS)) {
            flagMouseDraggedOn = 0;
            fireLagrangianChanged();
          }

        }

      }
    };

    renderModelView.addMouseListener(jPanel_Model_View_MouseListener);
    renderModelView.addMouseMotionListener(jPanel_Model_View_MouseMotionListener);

    /* add annotations to render view so selections on move are seen */
    renderModelView.removeAllRenderView(atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION);
    renderModelView.addRenderView(this);
    
  }

  void disconnectInterface() {

    JPanel_Model_View_RenderPanel renderModelView = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    if (jPanel_Model_View_MouseMotionListener != null) { /* remove the listener */
      renderModelView.removeMouseMotionListener(jPanel_Model_View_MouseMotionListener);      
      jPanel_Model_View_MouseMotionListener = null;
    }

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);      
      jPanel_Model_View_MouseListener = null;
    }

    if (interfaceModeStr.equals(interfaceMode_MOVE_POINTS)) {      
      disconnectInterface_Mode_MOVE_POINTS();
    }

    if (interfaceModeStr.equals(interfaceMode_SELECT_POINTS)) {
      disconnectInterface_Mode_SELECT_POINTS();
    }

  }

    private void jToggleButton_Move_PointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_Move_PointsActionPerformed
      
    }//GEN-LAST:event_jToggleButton_Move_PointsActionPerformed

    private void jToggleButton_Move_PointsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton_Move_PointsStateChanged

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      if (jToggleButton_Move_Points.isSelected() == false) {
        disconnectInterface();
      }
      
      if (jToggleButton_Move_Points.isSelected() == true) {
        setInterfaceMode(interfaceMode_MOVE_POINTS);
      }

    }//GEN-LAST:event_jToggleButton_Move_PointsStateChanged

    private void jToggleButton_Add_PointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_Add_PointsActionPerformed

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      SELM_Lagrangian_CONTROL_PTS_BASIC1 lagrangian = (SELM_Lagrangian_CONTROL_PTS_BASIC1)this.getData();

      /* add point at the current clicked location */     
      double[] newPtsX   = renderModelView.camera.cameraVRP.clone();

      lagrangian.addPoint(newPtsX);

      this.setData(lagrangian);

      /* setup the interface as if moving points */
      //setInterfaceMode("ADD_MOVE_POINTS");
      jToggleButton_Move_Points.setSelected(true);

      int[] controlPtsSelectedList_new = new int[1];
      int index_new = lagrangian.getNumPts() - 1;
      controlPtsSelectedList_new[0]    = index_new; /* index of new point */
      setControlPtsSelectedList(controlPtsSelectedList_new);
      
    }//GEN-LAST:event_jToggleButton_Add_PointsActionPerformed

    private void jToggleButton_Select_PointsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton_Select_PointsStateChanged

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      if (jToggleButton_Select_Points.isSelected() == false) {
        disconnectInterface();
      }

      if (jToggleButton_Select_Points.isSelected() == true) {
        setInterfaceMode(interfaceMode_SELECT_POINTS);
      }
      
    }//GEN-LAST:event_jToggleButton_Select_PointsStateChanged

    private void jToggleButton_Remove_PointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_Remove_PointsActionPerformed

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      SELM_Lagrangian_CONTROL_PTS_BASIC1 lagrangian = (SELM_Lagrangian_CONTROL_PTS_BASIC1)this.getData();

      /* remove the selected points */
      lagrangian.removePoints(controlPtsSelectedList);

      /* set nothing selected */
      resetControlPtsSelectedList();

      /* update the data structures */
      this.setData(lagrangian);

      /* setup the buttons */
      jToggleButton_Remove_Points.setSelected(false);

      /* set mode back to selection */
      jToggleButton_Select_Points.setSelected(true);
            
    }//GEN-LAST:event_jToggleButton_Remove_PointsActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane_Lagrangian;
    private javax.swing.JTable jTable_Lagrangian;
    private javax.swing.JToggleButton jToggleButton_Add_Points;
    private javax.swing.JToggleButton jToggleButton_Move_Points;
    private javax.swing.JToggleButton jToggleButton_Remove_Points;
    private javax.swing.JToggleButton jToggleButton_Select_Points;
    // End of variables declaration//GEN-END:variables

  @Override
  public void setData(SELM_Lagrangian lagrangian) {

    //SELM_Lagrangian lagrangian_old = ((TableModel_Lagrangian_CONTROL_PTS_BASIC1)(jTable_Lagrangian.getModel())).getLagrangianDataFromModel();

    ((TableModel_Lagrangian_CONTROL_PTS_BASIC1)(jTable_Lagrangian.getModel())).setFromLagrangianData(lagrangian);
    
    //if ((lagrangian_old == null) || (lagrangian_old.LagrangianName.equals(lagrangian.LagrangianName) == false) ) {
    if (interfaceModeStr.equals(interfaceMode_MOVE_POINTS) == false) {
      /* reset the selection */
      resetControlPtsSelectedList();
    }

  }

  
  @Override
  public SELM_Lagrangian getData() {
    SELM_Lagrangian lagrangian;

    lagrangian = ((TableModel_Lagrangian_CONTROL_PTS_BASIC1)(jTable_Lagrangian.getModel())).getLagrangianDataFromModel();

    return lagrangian;
  }


  public void interface_Move_Point_mouseDragged(MouseEvent e) {

    String    modifierStr;
    int       modifier;
    int       flagMode;

    modifier    = e.getModifiersEx();
    modifierStr = e.getModifiersExText(modifier);

    /* determine the mode */
    flagMode = -1;
    if (("Button1".equals(modifierStr)) && (flagMode == -1)) {
      int dirFlag = 1;
      interface_Move_Point_translation_mouseDragged(e, dirFlag); /* second is flag for dir */
    }

    if (("Shift+Button1".equals(modifierStr)) && (flagMode == -1)) {
      int dirFlag = 2;
      interface_Move_Point_translation_mouseDragged(e, dirFlag); /* second is flag for dir */
    }


    //updateControlPts();

    //renderModelView.repaint();

    //eventOutput("Mouse dragged: modifierStr = " + modifierStr + "; flagMode = " + flagMode + "; ", e);

  }


  public void interface_Move_Point_translation_mouseDragged(MouseEvent e, int dirFlag) {

    double    xDiff;
    double    yDiff;
    String    modifierStr;
    int       modifier;
    long      timeElapsed;
    int       num_dim          = 3;
    int       flagMode;
    int       i,j,k,d;

    JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;
    
    Dimension size = renderModelView.getSize();
    int       w    = size.width;
    int       h    = size.height;
    int       m    = java.lang.Math.min(w, h);

    SELM_Lagrangian_CONTROL_PTS_BASIC1 lagrangian = (SELM_Lagrangian_CONTROL_PTS_BASIC1)this.getData();

    if (flagMouseDraggedOn == 0) {
     
      camera_on_click = renderModelView.camera.clone();

      interface_Selection_mouseClicked(e); /* make a selection based on this point */

      lagrangian_on_click = (SELM_Lagrangian_CONTROL_PTS_BASIC1) (this.getData()).clone();

      mousePositionOnClickX = e.getX();
      mousePositionOnClickY = e.getY();

      mouseClickedElaspedTime_last = System.currentTimeMillis();

      flagMouseDraggedOn = 1;
    } else {

      mouseClickedElaspedTime = System.currentTimeMillis();

      timeElapsed = mouseClickedElaspedTime - mouseClickedElaspedTime_last;

      if (timeElapsed > 0) {

        mouseClickedPositionX = e.getX();
        mouseClickedPositionY = e.getY();

        /* figure out the mode */

        /* if rotation of object */
        xDiff = mouseClickedPositionX - mousePositionOnClickX;
        yDiff = mouseClickedPositionY - mousePositionOnClickY;

        /* figure out directions in world coordinates in which to move based on
         * the current camera location and view.
         */

        double cameraR[];
        double cameraR_T[];

        double moveVec[] = new double[num_dim];
        double moveVec_p[];

        /* determine displacement in camera coordinates */
          moveVec[0] = 0;
          moveVec[1] = 0;
          moveVec[2] = 0;

        if (dirFlag == 1) { /* left right movement */
          moveVec[0] = (-xDiff/w)*camera_on_click.cameraWinBounds[0];
          moveVec[1] = (-yDiff/h)*camera_on_click.cameraWinBounds[1];
          moveVec[2] = 0;
        }

        if (dirFlag == 2) { /* in and out movement */
          moveVec[0] = 0;
          moveVec[1] = (-yDiff/h)*camera_on_click.cameraWinBounds[1];
          moveVec[2] = (-xDiff/w)*camera_on_click.cameraWinBounds[0];
        }

        /* get the rotation matrices used to go from world to camera coordinates */
        cameraR   = camera_on_click.genCameraRotationMatrix();               /* world --> camera coord. */
        cameraR_T = cameraR.clone();
        Atz_LinearAlgebra.matrixTranspose(num_dim, num_dim, cameraR, cameraR_T); /* camera coord. --> world */

        moveVec_p = moveVec.clone();
        Atz_LinearAlgebra.matrixVecMult(num_dim, num_dim, cameraR_T,
                                    moveVec, moveVec_p);

        /* apply the displacement to change the camera reference point (location) */
        //for (d = 0; d < num_dim; d++) {
        //  camera.cameraVRP[d] = camera_on_click.cameraVRP[d] + moveVec_p[d];
        //}

        if (controlPtsSelectedList.length != 0) {
          double[] ptsX          = lagrangian.getPtsX();
          double[] ptsX_on_click = lagrangian_on_click.getPtsX();

          int N = controlPtsSelectedList.length;
          for (k = 0; k < N; k++) {
            int I = controlPtsSelectedList[k];
            for (d = 0; d < num_dim; d++) {
              ptsX[I*num_dim + d]
                = ptsX_on_click[I*num_dim + d] - moveVec_p[d];
            }
          }

          lagrangian.setPtsX(ptsX);

          this.setData(lagrangian); /* could also do this just on release */
        } /* end of number selected non-zero (do move them as a group) */

        /*
        eventOutput("Mouse dragged xDiff = " + xDiff
                  + "; yDiff = " + yDiff
                  + "; E_time = " + timeElapsed,
                  e);
         */
        
        renderModelView.repaint();
      }

      mouseClickedPositionX_last   = mouseClickedPositionX;
      mouseClickedPositionY_last   = mouseClickedPositionY;

      mouseClickedElaspedTime_last = mouseClickedElaspedTime;

    } /* end else */

  }



  public void interface_Selection_mouseClicked(MouseEvent e) {

    int    i,j,k;
    int    N;

    double dist_sq;

    double min_dist_sq;
    int    min_dist_I;

    double x,y;

    double X0[] = new double[3];
    double X1[] = new double[3];

    int keyPt;

    mouseClickedPositionX = e.getX();
    mouseClickedPositionY = e.getY();

    X0[0] = mouseClickedPositionX;
    X0[1] = mouseClickedPositionY;

    JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    SELM_Lagrangian_CONTROL_PTS_BASIC1 lagrangian = (SELM_Lagrangian_CONTROL_PTS_BASIC1)this.getData();

    Dimension size       = renderModelView.getSize();
    Dimension screenSize = renderModelView.getSize();
    int       w    = size.width;
    int       h    = size.height;

    /* retrieve the points from the atz3D representation of this Lagrangian DOF */
    Atz3D_Element[] atz3D_elements    = lagrangian.getAtz3DElementRepresentation();
    Atz3D_Element_Points atz3D_points = (Atz3D_Element_Points)atz3D_elements[lagrangian.atz3D_Index_Points]; 
    
    keyPt = atz3D_points.selectClosestPointIndex(X0, screenSize, renderModelView.camera);

    if (keyPt >= 0) {

      /* decide if we only select one or add to the list */
      int on_mask = e.CTRL_DOWN_MASK;  /* signals add to the list (or remove if already there) */
      if ((e.getModifiersEx() & on_mask) == on_mask) {        
        N     = controlPtsSelectedList.length;
        int count = 0;        
        for (k = 0; k < N; k++) {
          if (controlPtsSelectedList[k] != keyPt) {
            count++;
          }
        }

        /* check the key is not already recorded */
        if (count == N) { /* not recorded yet */
          /* be sure to add one to the list */
          count++;
        } /* else keyPt was already a member so will be removed */

        /* make the new array */
        int numSelected = count;
        int I           = 0;
        int[] controlPtsSelectedList_new = new int[numSelected];
        for (k = 0; k < N; k++) {
          if (controlPtsSelectedList[k] != keyPt) {
            controlPtsSelectedList_new[I] = controlPtsSelectedList[k];
            I++;
          }
        }
        if (numSelected == N + 1) {
          controlPtsSelectedList_new[N] = keyPt;
        }
        controlPtsSelectedList        = controlPtsSelectedList_new;
        
      } else {
        controlPtsSelectedList    = new int[1];
        controlPtsSelectedList[0] = keyPt;
      }

      //updateControlPtsSelected();

    } /* end keyPt non-negative */

    /* repaint the display */
    renderModelView.repaint();

  }


  public String getRenderTag() {
    return atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION;  /* indicate this is annotation */
  }

  public void renderToModel3D(Atz3D_Model model3D) {

    /* add panel specific annotations, 
     * such as selected points
     */

    SELM_Lagrangian_CONTROL_PTS_BASIC1 lagrangian = (SELM_Lagrangian_CONTROL_PTS_BASIC1)this.getData();

    int num_dim = 3;

    double[] ptsX = lagrangian.getPtsX();        
    Atz3D_Element_Points atz3D_Element_Points = new Atz3D_Element_Points();

    /* add the selected points (as large red points) */
    int N = controlPtsSelectedList.length;
    double[] ptsX_select = new double[N*num_dim];
    for (int k = 0; k < N; k++) {
      int I = controlPtsSelectedList[k];
      for (int d = 0; d < num_dim; d++) {
        ptsX_select[k*num_dim + d] = ptsX[I*num_dim + d];
      }
    }
    
    atz3D_Element_Points.setPoints(ptsX_select);
    atz3D_Element_Points.setPlotColor(Color.red);
    atz3D_Element_Points.setPlotSize(15);
        
    model3D.addElement(atz3D_Element_Points);
    
  }
  
}
