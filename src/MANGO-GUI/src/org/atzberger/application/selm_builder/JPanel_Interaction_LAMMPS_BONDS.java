package org.atzberger.application.selm_builder;

import org.atzberger.mango.atz3d.JPanel_Model_View_RenderPanel;
import org.atzberger.mango.atz3d.JPanel_Model_View_Composite;
import org.atzberger.mango.atz3d.Atz3D_Element;
import org.atzberger.mango.atz3d.Atz3D_Element_Points_DataClosest;
import org.atzberger.mango.atz3d.Atz3D_Camera;
import org.atzberger.mango.atz3d.Atz3D_Model;
import org.atzberger.mango.atz3d.Atz3D_Element_Points;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.ButtonGroup;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * Panel for editing this data type.
 *
 * @author Paul J. Atzberger
 *
 * @see <a href="http://www.atzberger.org">http://www.atzberger.org</a>
 */
public class JPanel_Interaction_LAMMPS_BONDS extends JPanel_Interaction implements SELM_InteractionRenderView {

  public application_SharedData applSharedData = null;

  final static String interfaceMode_ADDING_PAIRS    = "ADDING_PAIRS";
  final static String interfaceMode_REMOVING_PAIRS  = "REMOVING_PAIRS";

  final static int STR_LAGRANGIAN_NAME_TRUNC_SIZE   = 30;
  
  private      MouseMotionListener   jPanel_Model_View_MouseMotionListener = null;
  private      MouseListener         jPanel_Model_View_MouseListener       = null;

  String interfaceModeStr = "";
  int flagMouseDraggedOn;
  Atz3D_Camera camera_on_click;
  SELM_Interaction_LAMMPS_BONDS interaction_on_click;
  int mousePositionOnClickX;
  int mousePositionOnClickY;
  long mouseClickedElaspedTime_last;
  long mouseClickedElaspedTime;
  int mousePositionX;
  int mousePositionY;
  int mouseClickedPositionX;
  int mouseClickedPositionY;
  int mouseClickedPositionX_last;
  int mouseClickedPositionY_last;
  int[] controlPtsSelectedList             = new int[0];
  SELM_Lagrangian[] lagrangianSelectedList = new SELM_Lagrangian[0];

  public JPanel_Interaction_LAMMPS_BONDS(application_SharedData applSharedData_in) {
    applSharedData = applSharedData_in;
    initComponents();
    modifyComponents();

    /* add listener to the jTable_Lagrangian for any changes there */
    jTable_Interaction.getModel().addTableModelListener(new TableModelListener() {
      public void tableChanged(TableModelEvent e)  {
        jTable_Interaction_tableChanged(e);
      }
    });

    /* setup method for making objects of the target type */
    atz_Object_Factory = new Atz_Object_Factory_Generic(this.getClass().getPackage().getName(),
                                                                  "SELM_Interaction",
                                                                  this.getName());
    
  }

  public void jTable_Interaction_tableChanged(TableModelEvent e)  {
    //System.out.println("jTable_Interaction changed event" + e);

    fireInteractionChanged();

  }

  
  public void fireInteractionChanged() {

    JPanel jPanel_parent = (JPanel) this.getParent();

    if (jPanel_parent != null) {
      jPanel_parent.firePropertyChange("CHANGED_INTERACTION_DATA", 0, 1);
    }

  }

  /** Creates new form JPanel_Interaction_ControlPts_BASIC1 */
  //public JPanel_Interaction_LAMMPS_BONDS() {
  //  initComponents();
  //  modifyComponents();
 // }

  @Override
  public void setData(SELM_Interaction interaction) {

    //SELM_Lagrangian lagrangian_old = ((TableModel_Lagrangian_LAMMPS_ATOM_angle_style)(jTable_Lagrangian.getModel())).getLagrangianDataFromModel();

    ((TableModel_Interaction_LAMMPS_BONDS)(jTable_Interaction.getModel())).setFromInteractionData(interaction);

    //if ((lagrangian_old == null) || (lagrangian_old.LagrangianName.equals(lagrangian.LagrangianName) == false) ) {
    //if (interfaceModeStr.equals(interfaceMode_MOVE_POINTS) == false) {
      /* reset the selection */
    //  resetControlPtsSelectedList();
    //}

  }

  @Override
  public SELM_Interaction getData() {
    SELM_Interaction interaction;

    interaction = ((TableModel_Interaction_LAMMPS_BONDS)(jTable_Interaction.getModel())).getInteractionDataFromModel();

    return interaction;
  }


  void modifyComponents() {

    /* setup the button group for the point buttons */
    ButtonGroup buttonGroup = applSharedData.jPanel_Model_View_Composite.getButtonGroup_Model_View_Controls();

    buttonGroup.add(jToggleButton_Adding_Pairs);
    buttonGroup.add(jToggleButton_Removing_Pairs);
        
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Controls = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel_I1 = new javax.swing.JLabel();
        jLabel_I2 = new javax.swing.JLabel();
        jLabel_val_typeI1 = new javax.swing.JLabel();
        jLabel_val_typeI2 = new javax.swing.JLabel();
        jToggleButton_Adding_Pairs = new javax.swing.JToggleButton();
        jToggleButton_Removing_Pairs = new javax.swing.JToggleButton();
        jLabel_I3 = new javax.swing.JLabel();
        jPanel_tableHolder = new javax.swing.JPanel();
        jScrollPane_Interaction = new javax.swing.JScrollPane();
        jTable_Interaction = new org.atzberger.application.selm_builder.JTable_Interaction_LAMMPS_BONDS();

        setName("LAMMPS_BONDS"); // NOI18N

        jPanel_Controls.setName("jPanel_Controls"); // NOI18N

        jLabel1.setName("jLabel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(JPanel_Interaction_LAMMPS_BONDS.class);
        jLabel_I1.setText(resourceMap.getString("jLabel_I1.text")); // NOI18N
        jLabel_I1.setName("jLabel_I1"); // NOI18N

        jLabel_I2.setText(resourceMap.getString("jLabel_I2.text")); // NOI18N
        jLabel_I2.setName("jLabel_I2"); // NOI18N

        jLabel_val_typeI1.setText(resourceMap.getString("jLabel_val_typeI1.text")); // NOI18N
        jLabel_val_typeI1.setName("jLabel_val_typeI1"); // NOI18N

        jLabel_val_typeI2.setText(resourceMap.getString("jLabel_val_typeI2.text")); // NOI18N
        jLabel_val_typeI2.setName("jLabel_val_typeI2"); // NOI18N

        jToggleButton_Adding_Pairs.setText(resourceMap.getString("jToggleButton_Adding_Pairs.text")); // NOI18N
        jToggleButton_Adding_Pairs.setToolTipText(resourceMap.getString("jToggleButton_Adding_Pairs.toolTipText")); // NOI18N
        jToggleButton_Adding_Pairs.setAlignmentX(0.5F);
        jToggleButton_Adding_Pairs.setBorder(null);
        jToggleButton_Adding_Pairs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jToggleButton_Adding_Pairs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton_Adding_Pairs.setMargin(new java.awt.Insets(10, 14, 10, 14));
        jToggleButton_Adding_Pairs.setName("jToggleButton_Adding_Pairs"); // NOI18N
        jToggleButton_Adding_Pairs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton_Adding_PairsStateChanged(evt);
            }
        });
        jToggleButton_Adding_Pairs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_Adding_PairsActionPerformed(evt);
            }
        });

        jToggleButton_Removing_Pairs.setText(resourceMap.getString("jToggleButton_Removing_Pairs.text")); // NOI18N
        jToggleButton_Removing_Pairs.setToolTipText(resourceMap.getString("jToggleButton_Removing_Pairs.toolTipText")); // NOI18N
        jToggleButton_Removing_Pairs.setBorder(null);
        jToggleButton_Removing_Pairs.setMargin(new java.awt.Insets(10, 14, 10, 14));
        jToggleButton_Removing_Pairs.setName("jToggleButton_Removing_Pairs"); // NOI18N
        jToggleButton_Removing_Pairs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton_Removing_PairsStateChanged(evt);
            }
        });
        jToggleButton_Removing_Pairs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_Removing_PairsActionPerformed(evt);
            }
        });

        jLabel_I3.setText(resourceMap.getString("jLabel_I3.text")); // NOI18N
        jLabel_I3.setName("jLabel_I3"); // NOI18N

        javax.swing.GroupLayout jPanel_ControlsLayout = new javax.swing.GroupLayout(jPanel_Controls);
        jPanel_Controls.setLayout(jPanel_ControlsLayout);
        jPanel_ControlsLayout.setHorizontalGroup(
            jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_ControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_ControlsLayout.createSequentialGroup()
                        .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_I1)
                            .addComponent(jLabel_I2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_val_typeI1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                            .addComponent(jLabel_val_typeI2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
                    .addComponent(jLabel_I3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jToggleButton_Removing_Pairs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton_Adding_Pairs, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_ControlsLayout.createSequentialGroup()
                    .addGap(67, 67, 67)
                    .addComponent(jLabel1)
                    .addContainerGap(536, Short.MAX_VALUE)))
        );
        jPanel_ControlsLayout.setVerticalGroup(
            jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_ControlsLayout.createSequentialGroup()
                        .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_I1)
                            .addComponent(jLabel_val_typeI1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_I2)
                            .addComponent(jLabel_val_typeI2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_I3))
                    .addGroup(jPanel_ControlsLayout.createSequentialGroup()
                        .addComponent(jToggleButton_Adding_Pairs, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton_Removing_Pairs, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(jPanel_ControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_ControlsLayout.createSequentialGroup()
                    .addGap(79, 79, 79)
                    .addComponent(jLabel1)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel_tableHolder.setName("jPanel_tableHolder"); // NOI18N

        jScrollPane_Interaction.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane_Interaction.setName("jScrollPane_Interaction"); // NOI18N

        jTable_Interaction.setModel(new org.atzberger.application.selm_builder.TableModel_Interaction_LAMMPS_BONDS());
        jTable_Interaction.setName("jTable_Interaction"); // NOI18N
        jTable_Interaction.setRowSelectionAllowed(false);
        jScrollPane_Interaction.setViewportView(jTable_Interaction);

        javax.swing.GroupLayout jPanel_tableHolderLayout = new javax.swing.GroupLayout(jPanel_tableHolder);
        jPanel_tableHolder.setLayout(jPanel_tableHolderLayout);
        jPanel_tableHolderLayout.setHorizontalGroup(
            jPanel_tableHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_tableHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane_Interaction, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_tableHolderLayout.setVerticalGroup(
            jPanel_tableHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_tableHolderLayout.createSequentialGroup()
                .addComponent(jScrollPane_Interaction, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_tableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_Controls, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_Controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_tableHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton_Adding_PairsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_Adding_PairsActionPerformed

      
}//GEN-LAST:event_jToggleButton_Adding_PairsActionPerformed

    private void jToggleButton_Removing_PairsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_Removing_PairsActionPerformed

}//GEN-LAST:event_jToggleButton_Removing_PairsActionPerformed

    private void jToggleButton_Adding_PairsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton_Adding_PairsStateChanged

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      if (jToggleButton_Adding_Pairs.isSelected() == true) {
        setInterfaceMode(interfaceMode_ADDING_PAIRS);
      }

      if (jToggleButton_Adding_Pairs.isSelected() == false) {
        disconnectInterface();
      }
      
    }//GEN-LAST:event_jToggleButton_Adding_PairsStateChanged

    private void jToggleButton_Removing_PairsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton_Removing_PairsStateChanged

      JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

      if (jToggleButton_Removing_Pairs.isSelected() == true) {
        setInterfaceMode(interfaceMode_REMOVING_PAIRS);
      }

      if (jToggleButton_Removing_Pairs.isSelected() == false) {
        disconnectInterface();
      }

    }//GEN-LAST:event_jToggleButton_Removing_PairsStateChanged


    void setInterfaceMode(String modeStr) {

      interfaceModeStr = modeStr;

      if (interfaceModeStr.equals(interfaceMode_ADDING_PAIRS)) {
        setInterface_Mode_ADDING_PAIRS();
      }

      if (interfaceModeStr.equals(interfaceMode_REMOVING_PAIRS)) {
        setInterface_Mode_REMOVING_PAIRS();
      }

    }


  void setInterface_Mode_ADDING_PAIRS() {

    JPanel_Model_View_Composite renderModelViewComposite
      = (JPanel_Model_View_Composite) applSharedData.jPanel_Model_View_Composite;

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    /* set the render interface to external controls so this panel can take control */
    renderModelView.setInterfaceMode(renderModelView.interfaceMode_External_Control); 

    /* clear selected points */
    resetSelectedList();

    /* setup action listener for the renderModelView */
    if (jPanel_Model_View_MouseMotionListener != null) { /* remove any old listeners */
      renderModelView.removeMouseMotionListener(jPanel_Model_View_MouseMotionListener);
      jPanel_Model_View_MouseMotionListener = null;
    }

    if (jPanel_Model_View_MouseListener != null) { /* remove any old listeners */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    jPanel_Model_View_MouseMotionListener = new MouseMotionListener() {

      public void mouseDragged(MouseEvent e) {
        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {
          //interface_Move_Point_mouseDragged(e);
        }

      }

      public void mouseMoved(MouseEvent e) {
        /* nothing to do for this type */
      }
    };

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    jPanel_Model_View_MouseListener = new MouseListener() {

      public void mouseClicked(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_ADDING_PAIRS)) {            
            jToggleButton_AddingPairs_interface_Selection(e); /* WARNING: check correct location */
          }

        }

      } /* end mouseClicked() */

      public void mouseExited(MouseEvent e) {
      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
      }

      public void mouseReleased(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_ADDING_PAIRS)) {
            //flagMouseDraggedOn = 0;
            //fireLagrangianChanged();
          }

        }

      }
    };

    renderModelView.addMouseListener(jPanel_Model_View_MouseListener);
    renderModelView.addMouseMotionListener(jPanel_Model_View_MouseMotionListener);

    /* add annotations to render view so selections on move are seen */
    renderModelView.removeAllRenderView(atz3D_RENDER_TAG_INTERACTION_ANNOTATION);
    renderModelView.addRenderView(this);

  }

    void setInterface_Mode_REMOVING_PAIRS() {

    JPanel_Model_View_Composite renderModelViewComposite
      = (JPanel_Model_View_Composite) applSharedData.jPanel_Model_View_Composite;

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    /* set the render interface to external controls so this panel can take control */
    renderModelView.setInterfaceMode(renderModelView.interfaceMode_External_Control);

    /* clear selected points */
    resetSelectedList();

    /* setup action listener for the renderModelView */
    if (jPanel_Model_View_MouseMotionListener != null) { /* remove any old listeners */
      renderModelView.removeMouseMotionListener(jPanel_Model_View_MouseMotionListener);
      jPanel_Model_View_MouseMotionListener = null;
    }

    if (jPanel_Model_View_MouseListener != null) { /* remove any old listeners */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    jPanel_Model_View_MouseMotionListener = new MouseMotionListener() {

      public void mouseDragged(MouseEvent e) {
        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {
          //interface_Move_Point_mouseDragged(e);
        }

      }

      public void mouseMoved(MouseEvent e) {
        /* nothing to do for this type */
      }
    };

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    jPanel_Model_View_MouseListener = new MouseListener() {

      public void mouseClicked(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_REMOVING_PAIRS)) {
            jToggleButton_RemovingPairs_interface_Selection(e); /* WARNING: check correct location */
          }

        }

      } /* end mouseClicked() */

      public void mouseExited(MouseEvent e) {
      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
      }

      public void mouseReleased(MouseEvent e) {

        JPanel_Model_View_RenderPanel renderModelView
          = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

        if (renderModelView.flagInterfaceMode == renderModelView.interfaceMode_External_Control) {

          if (interfaceModeStr.equals(interfaceMode_REMOVING_PAIRS)) {
            //flagMouseDraggedOn = 0;
            //fireLagrangianChanged();
          }

        }

      }
    };

    renderModelView.addMouseListener(jPanel_Model_View_MouseListener);
    renderModelView.addMouseMotionListener(jPanel_Model_View_MouseMotionListener);

    /* add annotations to render view so selections on move are seen */
    renderModelView.removeAllRenderView(atz3D_RENDER_TAG_INTERACTION_ANNOTATION);
    renderModelView.addRenderView(this);

  }

  void disconnectInterface() {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    if (jPanel_Model_View_MouseMotionListener != null) { /* remove the listener */
      renderModelView.removeMouseMotionListener(jPanel_Model_View_MouseMotionListener);
      jPanel_Model_View_MouseMotionListener = null;
    }

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    if (interfaceModeStr.equals(interfaceMode_ADDING_PAIRS)) {
      disconnectInterface_Mode_ADDING_PAIRS();
    }

    if (interfaceModeStr.equals(interfaceMode_REMOVING_PAIRS)) {
      disconnectInterface_Mode_REMOVING_PAIRS();
    }

  }


  void disconnectInterface_Mode_ADDING_PAIRS() {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    /* remove the annotation */
    //renderModelView.removeAllRenderView(atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION);

    /* undo any selections */
    resetSelectedList();

  }

  void disconnectInterface_Mode_REMOVING_PAIRS() {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    if (jPanel_Model_View_MouseListener != null) { /* remove the listener */
      renderModelView.removeMouseListener(jPanel_Model_View_MouseListener);
      jPanel_Model_View_MouseListener = null;
    }

    /* remove the annotation */
    //renderModelView.removeAllRenderView(atz3D_RENDER_TAG_LAGRANGIAN_ANNOTATION);

    /* undo any selections */
    resetSelectedList();
    
  }

  private void jToggleButton_AddingPairs_interface_Selection(MouseEvent e) {

    JPanel_Model_View_RenderPanel renderModelView = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    String nameTrunc;
        
    int I1, I2;
    int typeI1, typeI2;
    SELM_Lagrangian lagrangianI1, lagrangianI2;

    SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE lagrangian1_LAMMPS;
    SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE lagrangian2_LAMMPS;

    /* perform selection of points */
    interface_Selection_mouseClicked(e);

    /* determine what to do with the selection data */
    if (controlPtsSelectedList.length >= 1) {      
      lagrangianI1       = lagrangianSelectedList[0];
      lagrangian1_LAMMPS = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianI1;
      I1                 = controlPtsSelectedList[0];
      typeI1             = lagrangian1_LAMMPS.getTypeID()[I1];

      nameTrunc    = truncStr(lagrangianI1.LagrangianName, STR_LAGRANGIAN_NAME_TRUNC_SIZE);
      
      jLabel_val_typeI1.setText(nameTrunc + ":" + Integer.toString(typeI1));
      jLabel_val_typeI1.setForeground(Color.green);
    }

    if (controlPtsSelectedList.length >= 2) {

      /* get references for the current interaction and
       * add the pairs to the interaction data structure
       */
      TableModel_Interaction_LAMMPS_BONDS model
        = (TableModel_Interaction_LAMMPS_BONDS) jTable_Interaction.getModel();

      SELM_Interaction_LAMMPS_BONDS Interaction_LAMMPS_BONDS
        = (SELM_Interaction_LAMMPS_BONDS) model.getInteractionDataFromModel();

      //double coefficient = Double.parseDouble(jFormattedTextField_Stiffness.getText());
      
      /* allocated list I1 and I2 */
      int N_new = controlPtsSelectedList.length / 2;

      /* run over all pairs and add to the list */
      for (int k = 0; k < N_new; k++) {
        lagrangianI1 = lagrangianSelectedList[2 * k];
        I1           = controlPtsSelectedList[2 * k];

        lagrangianI2 = lagrangianSelectedList[2 * k + 1];
        I2           = controlPtsSelectedList[2 * k + 1];

        /* assumes type of LAMMPS_ATOM_angle_style */
        lagrangian1_LAMMPS = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianI1;
        lagrangian2_LAMMPS = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianI2;

        //typeI1             = lagrangian1_LAMMPS.getTypeID()[I1];
        //typeI2             = lagrangian2_LAMMPS.getTypeID()[I2];

        nameTrunc    = truncStr(lagrangianI1.LagrangianName, STR_LAGRANGIAN_NAME_TRUNC_SIZE);
        jLabel_val_typeI1.setText(nameTrunc + ":" + Integer.toString(I1));

        nameTrunc    = truncStr(lagrangianI2.LagrangianName, STR_LAGRANGIAN_NAME_TRUNC_SIZE);
        jLabel_val_typeI2.setText(nameTrunc + ":" + Integer.toString(I2));
        jLabel_val_typeI2.setForeground(Color.blue);

        //System.out.println("Adding to interaction : I1 = " + lagrangianI1.LagrangianName + ":" + I1
        //                                       + "; I2 = " + lagrangianI2.LagrangianName + ":" + I2);

        Interaction_LAMMPS_BONDS.addPair(lagrangianI1, I1, lagrangianI2, I2);

      }

      jLabel_val_typeI1.setForeground(Color.black);
      jLabel_val_typeI2.setForeground(Color.black);

      model.setFromInteractionData(Interaction_LAMMPS_BONDS);

      //model.fireTableDataChanged(); /* @@@ */

      /* set no control points selected */
      resetSelectedList();
    }

  }


  private void jToggleButton_RemovingPairs_interface_Selection(MouseEvent e) {

    JPanel_Model_View_RenderPanel renderModelView
      = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    int I1, I2;
    int typeI1, typeI2;
    SELM_Lagrangian lagrangianI1, lagrangianI2;
    String nameTrunc;

    SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE lagrangian1_LAMMPS;
    SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE lagrangian2_LAMMPS;

    //System.out.println("Removing Pairs !!!!!!!!!!!!! : Mouse clicked (# of clicks: "
    //        + e.getClickCount() + ")" + e);

    /* perform selection of points */
    interface_Selection_mouseClicked(e);

    /* determine what to do with the selection data */
    if (controlPtsSelectedList.length >= 1) {      
      lagrangianI1 = lagrangianSelectedList[0];
      lagrangian1_LAMMPS = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianI1;
      I1                 = controlPtsSelectedList[0];
      typeI1             = lagrangian1_LAMMPS.getTypeID()[I1];
      nameTrunc          = truncStr(lagrangianI1.LagrangianName, STR_LAGRANGIAN_NAME_TRUNC_SIZE);
      jLabel_val_typeI1.setText(nameTrunc + ":" + Integer.toString(typeI1));
      jLabel_val_typeI1.setForeground(Color.red);
    }
    
    /* determine what to do with selected points */   
    if (controlPtsSelectedList.length >= 2) {

      /* get references for the current interaction and
       * add the pairs to the interaction data structure
       */
      TableModel_Interaction_LAMMPS_BONDS model
        = (TableModel_Interaction_LAMMPS_BONDS) jTable_Interaction.getModel();

      SELM_Interaction_LAMMPS_BONDS Interaction_LAMMPS_BONDS
        = (SELM_Interaction_LAMMPS_BONDS) model.getInteractionDataFromModel();

      double stiffnessK = 0.0;
      double restLength = 0.0;

      /* allocated list I1 and I2 */
      int N_new = controlPtsSelectedList.length / 2;

      /* run over all pairs and add to the list */
      for (int k = 0; k < N_new; k++) {
        I1           = controlPtsSelectedList[2 * k];
        lagrangianI1 = lagrangianSelectedList[2 * k];
        I2           = controlPtsSelectedList[2 * k + 1];
        lagrangianI2 = lagrangianSelectedList[2 * k + 1];

        lagrangian1_LAMMPS = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianI1;
        lagrangian2_LAMMPS = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianI2;

        //typeI1             = lagrangian1_LAMMPS.getTypeID()[I1];
        //typeI2             = lagrangian2_LAMMPS.getTypeID()[I2];

        //System.out.println("Trying to remove interaction : I1 = " + lagrangianI1.LagrangianName + ":" + I1
        //                                              + "; I2 = " + lagrangianI2.LagrangianName + ":" + I2);
        
        Interaction_LAMMPS_BONDS.removePair(lagrangianI1, I1, lagrangianI2, I2);

      }

      model.setFromInteractionData(Interaction_LAMMPS_BONDS);

      /* set no control points selected */
      resetSelectedList();
    }


  }

  public void interface_Selection_mouseClicked(MouseEvent e) {

    int    i,j,k;
    int    N;
    
    double x,y;

    double X0[] = new double[3];
    double X1[] = new double[3];
    
    mouseClickedPositionX = e.getX();
    mouseClickedPositionY = e.getY();

    X0[0] = mouseClickedPositionX;
    X0[1] = mouseClickedPositionY;

    JPanel_Model_View_RenderPanel renderModelView
        = (JPanel_Model_View_RenderPanel) applSharedData.jPanel_Model_View_RenderPanel;

    SELM_Interaction_LAMMPS_BONDS interaction = (SELM_Interaction_LAMMPS_BONDS)this.getData();

    SELM_Lagrangian[] lagrangianList = applSharedData.jTable_MainData.getLagrangianList();

    Dimension size        = renderModelView.getSize();
    Dimension screenSize  = renderModelView.getSize();
    int       w           = size.width;
    int       h           = size.height;

    int       keyPt                = -1;
    
    double    dist_sq              = -1;
    double    dist_sq_min          = -1;
    int       keyPt_min            = -1;
    SELM_Lagrangian lagrangian_min = null;

    /* retrieve the points from the atz3D representation of this Interaction */
    for (k = 0; k < lagrangianList.length; k++) {

      /* only consider SELM_Lagrangian_LAMMPS_ATOM_angle_style */
      if (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE.class.isInstance(lagrangianList[k])) {
        
        SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE lagrangian_LAMMPS_ATOM_angle_style
          = (SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)lagrangianList[k];

        if (lagrangian_LAMMPS_ATOM_angle_style.isVisible()) {

          Atz3D_Element[]                  atz3D_elements;
          Atz3D_Element_Points             atz3D_points;
          double[]                         ptX;

          Atz3D_Element_Points_DataClosest data;

          atz3D_elements = lagrangian_LAMMPS_ATOM_angle_style.getAtz3DElementRepresentation();
          atz3D_points   = (Atz3D_Element_Points) atz3D_elements[lagrangian_LAMMPS_ATOM_angle_style.atz3D_Index_Points];

          data           = atz3D_points.selectClosestPoint(X0, screenSize, renderModelView.camera);

          keyPt          = data.keyPt;
          dist_sq        = data.dist_sq;
          
          if ((dist_sq < dist_sq_min) || (dist_sq_min < 0)) {
            dist_sq_min    = dist_sq;
            keyPt_min      = keyPt;
            lagrangian_min = lagrangian_LAMMPS_ATOM_angle_style;
          }

        } /* end check is visible */

      } /* end check LAMMPS_ATOM_angle_style */

    } /* end of k loop */

    if (keyPt_min >= 0) { /* select the closest point over all structures */

      /* decide if we only select one or add to the list */
      int on_mask = e.CTRL_DOWN_MASK;  /* signals add to the list (or remove if already there) */
      if ((e.getModifiersEx() & on_mask) == on_mask) {
        N     = controlPtsSelectedList.length;
        //int count = 0;
        //for (k = 0; k < N; k++) {
        //  if ((controlPtsSelectedList[k] != keyPt_min) || (lagrangianSelectedList[k] != lagrangian_min)) {
        //    count++;
        //  }
        //}

        ///* check the key is not already recorded */
        //if (count == N) { /* not recorded yet */
          /* be sure to add one to the list */
        //count++;
        //} /* else keyPt was already a member so will be removed (??? see mod. below)*/
        /* WARNING: we now allow for same point to be selected twice! */

        /* make the new array */
        //int numSelected = count;
        int numSelected = N + 1;
        int I           = 0;
        int[]             controlPtsSelectedList_new = new int[numSelected];
        SELM_Lagrangian[] lagrangianSelectedList_new = new SELM_Lagrangian[numSelected];
        for (k = 0; k < N; k++) {
          //if ((controlPtsSelectedList[k] != keyPt_min) || (lagrangianSelectedList[k] != lagrangian_min)) {
            controlPtsSelectedList_new[I] = controlPtsSelectedList[k];
            lagrangianSelectedList_new[I] = lagrangianSelectedList[k];
            I++;
          //}
        }
        //if (numSelected == N + 1) {
          controlPtsSelectedList_new[N] = keyPt_min;
          lagrangianSelectedList_new[N] = lagrangian_min;
        //}
        controlPtsSelectedList        = controlPtsSelectedList_new;
        lagrangianSelectedList        = lagrangianSelectedList_new;

      } else {
        controlPtsSelectedList    = new int[1];
        controlPtsSelectedList[0] = keyPt_min;
        lagrangianSelectedList    = new SELM_Lagrangian[1];
        lagrangianSelectedList[0] = lagrangian_min;
      }

      //updateControlPtsSelected();

    } /* end keyPt non-negative */

    /* repaint the display */
    renderModelView.repaint();

  }

  public String getRenderTag() {
    return atz3D_RENDER_TAG_INTERACTION_ANNOTATION;  /* indicate this is annotation */
  }

  public void renderToModel3D(Atz3D_Model model3D) {

    /* add panel specific annotations,
     * such as selected points
     */
    int num_dim = 3;

    int I, k, d;
    double[] ptsX;
    Atz3D_Element_Points atz3D_Element_Points = new Atz3D_Element_Points();

    /* add the selected points (as large red points) */
    int N = controlPtsSelectedList.length;
    double[] ptsX_select = new double[N*num_dim];
    for (k = 0; k < N; k++) {
      ptsX = ((SELM_Lagrangian_LAMMPS_ATOM_ANGLE_STYLE)(lagrangianSelectedList[k])).getPtsX();
      I    = controlPtsSelectedList[k];
      for (d = 0; d < num_dim; d++) {
        ptsX_select[k*num_dim + d] = ptsX[I*num_dim + d];
      }
    }

    atz3D_Element_Points.setPoints(ptsX_select);
    atz3D_Element_Points.setPlotColor(Color.red);
    atz3D_Element_Points.setPlotSize(15);

    model3D.addElement(atz3D_Element_Points);

  }

  void resetSelectedList() {
    controlPtsSelectedList = new int[0];
    lagrangianSelectedList = new SELM_Lagrangian[0];
  }

  String truncStr(String str, int size) {
    String str_trunc;
    int     m = java.lang.Math.min(str.length(), STR_LAGRANGIAN_NAME_TRUNC_SIZE);
    str_trunc = str.substring(0, m);
    return str_trunc;
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_I1;
    private javax.swing.JLabel jLabel_I2;
    private javax.swing.JLabel jLabel_I3;
    private javax.swing.JLabel jLabel_val_typeI1;
    private javax.swing.JLabel jLabel_val_typeI2;
    private javax.swing.JPanel jPanel_Controls;
    private javax.swing.JPanel jPanel_tableHolder;
    private javax.swing.JScrollPane jScrollPane_Interaction;
    private javax.swing.JTable jTable_Interaction;
    private javax.swing.JToggleButton jToggleButton_Adding_Pairs;
    private javax.swing.JToggleButton jToggleButton_Removing_Pairs;
    // End of variables declaration//GEN-END:variables

}
